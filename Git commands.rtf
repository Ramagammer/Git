{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 iTerms2 command\'92s for work with Git \'92n GitHub\'85\
\
\
git clone <url>\
\
ls (Lists of documents)\
\
cd (location of term)\
\
git add (archive)\
\
git touch (archive)\
\
git status (with this tool we can see the status of our archive in the term and compare with his status on the Github server).\
\
git commit am- (\'93description of the changes\'94) (we can use this tool for get a detail of the changes that we made before).\
\
git push (for send the changes to the Github sv).\
\
git pull (for get for our terminal the changes that other person did in the GitHub server).\
\
\'97 How we can resolve a \'93Merge conflict\'94 \'97\
\
First we have to see our text editor and take the two changes and transform those in a one solution.\
After that we have to add in the iTerm one commit.\
\
git reset: \
\
 git reset \'97hard <commit> (for back a previous version with the commit name that we had put.\
\
 git reset \'97hard origin/master (for back to the previous version on our GitHub repository).\
\
git log (This command shows a list of all the commits made to a repository.\
\
git branch (with this command we can see the branch where we are).\
\
git checkout -b (name) (with this command we can create a new branch).\
\
git checkout (name) (for switch between our branchs).\
\
\
\
\
\
\
\
}